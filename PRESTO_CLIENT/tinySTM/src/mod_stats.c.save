/*
 * File:
 *   mod_stats.c
 * Author(s):
 *   Pascal Felber <pascal.felber@unine.ch>
 * Description:
 *   Module for gathering global statistics about transactions.
 *
 * Copyright (c) 2007-2009.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, version 2
 * of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

#include <assert.h>
#include <limits.h>
#include <stdio.h>
#include <string.h>
#include "mod_stats.h"
#include "atomic.h"
#include "stm.h"


#if defined LEARNING || ADAPTIVITY

#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <pthread.h>

#define LOCK_ARRAY_SIZE                 (1 << LOCK_ARRAY_LOG_SIZE)

int readAccessArray[LOCK_ARRAY_SIZE] = {0};
int writeAccessArray[LOCK_ARRAY_SIZE] = {0};
int sample_counter;

#endif

#ifdef ADAPTIVITY

//#include "barrier.h"

extern int thread_getId();

//int sample_counter;
//int *collect;
int *stats_key;
//int sh1;
//int sh2;
//int sh3;
//my_atomic_t prod = 0;
#endif

#if defined LEARNING || ADAPTIVITY
unsigned long read_sum = 0;
unsigned long write_sum = 0;
#endif

/* ################################################################### *
 * TYPES
 * ################################################################### */

static int mod_stats_key;
static int mod_stats_initialized = 0;

static mod_stats_data_t mod_stats_global = { 0, 0, ULONG_MAX, 0, 0, 0, NULL, NULL, 0, 0, 0, 0, 0 };

/* ################################################################### *
 * FUNCTIONS
 * ################################################################### */


#if defined LEARNING || ADAPTIVITY

int get_stats_key(){
	return mod_stats_key;
}

void reset_statistics(){
	mod_stats_data_t *stats;
        stats = (mod_stats_data_t *)stm_get_specific(TXARGS mod_stats_key);
	stats->totalRt = 0;
        stats->totalT= 0;
        stats->commitCounter = 0;
        stats->abortCounter = 0;
        //stats->ephocCounter = 0;
        stats->nonTransCounter = 0;
        stats->totalNonTransTime = 0;
        stats->totalWrite = 0;
        stats->totalRead = 0;
	sample_counter = 0;
}

void update_statistics()
{
//	printf("dentro update statistics: %d\n", thread_getId());
	mod_stats_data_t *stats;
	stats = (mod_stats_data_t *)stm_get_specific(TXARGS mod_stats_key);
	assert(stats != NULL);
	pthread_t tid;
	tid = pthread_self();
	Sample *s = (Sample *) malloc(sizeof(Sample));

	// aggiornamento statistiche transazioni

	if((stats->abortCounter + stats->commitCounter) == 0){
		printf("Divisione per zero: stats->abortCounter + stats->commitCounter = 0\n");
		s->nabort = 0;
		s->ncommit = 0;
	}


    if(stats->abortCounter == 0){
            s->pabort = 0;
            s->nabort = 0;
#ifdef ADAPTIVITY
            if(stats->monitor) {stats->sh.pabort=0;}
//		stats->sh.pabort=0;
#endif
    }else{
            s->nabort = stats->abortCounter;
            s->pabort = ((double) stats->abortCounter)/(stats->abortCounter + stats->commitCounter);
#ifdef ADAPTIVITY
	        if(stats->monitor) {
	        	stats->sh.pabort = ((double) stats->abortCounter)/(stats->abortCounter + stats->commitCounter);
	        	//printf("mod_stats.c - pabort = %f\n", stats->sh.pabort);
	        }
#endif
    }

    if(stats->commitCounter == 0){
    	printf("Divisione per zero: stats->commitCounter = 0\n");
    	s->ncommit = 0;
    	s->time = -1;
    	s->dimReadSet = -1;
    	s->dimWriteSet = -1;
#ifdef ADAPTIVITY
    	if(stats->monitor) {stats->sh.transaction_time = -1;}
//	stats->sh.transaction_time=-1;
#endif
    }else{
    	s->ncommit = stats->commitCounter;
//DIEGO differenza
    	s->totalTime = (stats->totalT/stats->commitCounter)-(stats->totalRt/stats->commitCounter);
//DIEGO
    	s->time = stats->totalRt/stats->commitCounter;
    	s->dimReadSet = stats->totalRead/stats->commitCounter;
    	s->dimWriteSet = stats->totalWrite/stats->commitCounter;
	r_entry_t *readset=get_current_read_set();
	int k;
	int r = 0;
	int w = 0;
//	unsigned long read_sum = 0;
//	unsigned long write_sum = 0;
	unsigned long rw_index = 0;
	unsigned long ww_index = 0;
	//readAccessArray

	for(k=0; k<LOCK_ARRAY_SIZE; k++){
		//w = writeAccessArray[k];
		//r = readAccessArray[k];
		//rw_index = rw_index + (r*w);
		//ww_index = ww_index + (w*w);
		//read_sum = read_sum + r;
		//write_sum = write_sum + w;
		ww_index +=writeAccessArray[k]*writeAccessArray[k];
		rw_index +=readAccessArray[k]*writeAccessArray[k];
//		read_sum += readAccessArray[k];
//		write_sum += writeAccessArray[k]; 
	}
	memset(writeAccessArray, '\0', LOCK_ARRAY_SIZE*sizeof(int));
	memset(readAccessArray, '\0', LOCK_ARRAY_SIZE*sizeof(int));
	if(read_sum == 0 || write_sum == 0){
		s->rw_index = 0;
		s->rw_index = 0;
	}else{
		s->rw_index = ((double)rw_index)/((double)(read_sum*write_sum));
		s->ww_index = ((double)ww_index)/((double)(write_sum*write_sum));
	}
	s->read_sum = read_sum;
	s->write_sum = write_sum;
//ELIMINARE
/*	s->rw_index=0;
	s->ww_index=0;
	s->read_sum=0;
	s->write_sum=0;*/
//ELIMINARE
#ifdef ADAPTIVITY
    	if(stats->monitor) {
    		stats->sh.transaction_time = stats->totalRt/stats->commitCounter;
    		stats->sh.dimReadSet = stats->totalRead/stats->commitCounter;
    		stats->sh.dimWriteSet = stats->totalWrite/stats->commitCounter;
		if(read_sum == 0 || write_sum == 0){
	                s->rw_index = 0;
        	        s->rw_index = 0;
        	}else{
        	        stats->sh.rw_index = ((double)rw_index)/((double)(read_sum*write_sum));
        	        stats->sh.ww_index = ((double)ww_index)/((double)(write_sum*write_sum));
        	}
		stats->sh.read_sum = read_sum;
		stats->sh.write_sum = write_sum;
//    		printf("Scritte: %d - %d - %d\n", stats->sh.transaction_time, stats->sh.dimReadSet, stats->sh.dimWriteSet);
	}
#endif
	read_sum=0;
	write_sum=0;
    }

    //aggiornamento statistiche tempo non transazionale
